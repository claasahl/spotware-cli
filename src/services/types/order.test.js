const {lifecycle} = require("../../../build/services/types/order")

describe("order lifecylce", () => {
    test("complete lifecyle: 'rejected'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("REJECTED")
    })

    test("complete lifecyle: 'rejected' (2)", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("REJECTED")
    })

    test("complete lifecyle: 'canceled'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("CANCELED")
    })

    test("complete lifecyle: 'expired'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("EXPIRED")
    })

    test("complete lifecyle: 'closed'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("FILLED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("FILLED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("CLOSED")
    })

    test("when in state 'uninitialized': emit no events, but 'created'", () => {
        const stream = lifecycle()
        // expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toBeUndefined()
        expect(stream.update({type: "REJECTED"})).toBeUndefined()
        expect(stream.update({type: "EXPIRED"})).toBeUndefined()
        expect(stream.update({type: "CANCELED"})).toBeUndefined()
        expect(stream.update({type: "FILLED"})).toBeUndefined()
        expect(stream.update({type: "PROFITLOSS"})).toBeUndefined()
        expect(stream.update({type: "PROFITLOSS"})).toBeUndefined()
        expect(stream.update({type: "CLOSED"})).toBeUndefined()
        expect(stream.update({type: "ENDED"})).toBeUndefined()
    })
    test("when in state 'created': emit no events, but 'accepted', 'rejected', 'canceled'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        // expect(stream.update({type: "ACCEPTED"})).toStrictEqual("CREATED")
        // expect(stream.update({type: "REJECTED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("CREATED")
        // expect(stream.update({type: "CANCELED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("CREATED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("CREATED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("CREATED")
    })
    test("when in state 'accepted': emit no events, but 'rejected', 'expired', 'canceled', 'filled'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        // expect(stream.update({type: "REJECTED"})).toStrictEqual("ACCEPTED")
        // expect(stream.update({type: "EXPIRED"})).toStrictEqual("ACCEPTED")
        // expect(stream.update({type: "CANCELED"})).toStrictEqual("ACCEPTED")
        // expect(stream.update({type: "FILLED"}))..toStrictEqual("ACCEPTED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("ACCEPTED")
    })
    test("when in state 'filled': emit no events, but 'profitloss', 'closed'", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("FILLED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("FILLED")
        // expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("FILLED")
        // expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("FILLED")
        // expect(stream.update({type: "CLOSED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("FILLED")
    })
    test("when in state 'expired': emit no more events", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("EXPIRED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("EXPIRED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("EXPIRED")
    })
    test("when in state 'rejected': emit no more events", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("REJECTED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("REJECTED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("REJECTED")
    })
    test("when in state 'canceled': emit no more events", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("CANCELED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("CANCELED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("CANCELED")
    })
    test("when in state 'closed': emit no more events", () => {
        const stream = lifecycle()
        expect(stream.update({type: "CREATED"})).toStrictEqual("CREATED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("ACCEPTED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("FILLED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("FILLED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("FILLED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "ENDED"})).toStrictEqual("CLOSED")

        // should not have any effect
        expect(stream.update({type: "CREATED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "ACCEPTED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "REJECTED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "EXPIRED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "CANCELED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "FILLED"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "PROFITLOSS"})).toStrictEqual("CLOSED")
        expect(stream.update({type: "CLOSED"})).toStrictEqual("CLOSED")
    })
})